一.打包debug 编译命令
  ./gradlew assembleDebug
生成包目录介绍：
1、进入app文件目录(用as自带ter：cd app)
2、调用构建项目gradle命令：../gradlew assembleDebug(或点击as右侧gradle中module中的assembleDebug生成)
3、然后我们可以进入app，下build->outputs->apk文件目录下可以看到两个文件
一个是.apk debug对应的安装包文件
一个是.ap 被称为基线版本ap，将来在这个版本上，进行动态部署时需要的。（动态部署时，会根据这个ap生成差量的内容）
4、logs文件夹（不必关注）
5、remote-bundles-debug文件夹 存放所有远程bundle文件
6、apk-files.txt文件 所有文件名称、路径还有md5值，是为了以后用动态部署时进行比较文件是否变化的依据。
7、atlasConfig.json文件 记录所有atlas所有配置项的值，里面包含了一些默认值。
8、atlasFrameworkProperties.json 主要记录了bundle的信息（bundle的名称、依赖、版本信息）
9、build.txt 记录了gradle版本 atlas版本。。。的版本信息
10、dependencies、dependencyTree-debug两个文件 记录了项目中所有依赖
11、packageIdFile.properties文件 记录了每个bundle和它们的 资源分段 （为了避免bundle资源与apk资源冲突的问题）
12、pluginDependencies.txt 插件的依赖（暂时不用关注）
13、version.properties文件 记录了所有依赖的版本好和它们的格式

二：发布基线版本
在app目录下执行发布命令：../gradlew publish
打开目录：open ~/.m2/repository/
我们可以在目录中看到～/.m2/repository/com/taobao/android/atlasdemo/AP-debug/1.0.0/AP-debug-1.0.0.ap 文件
那怎么设置版本好呢？
我们现在在app 的build.gradle中可以看到group、version、artifactId这三个字段，标示了我们发布的路径、名称、版本

group = 'com.taobao.android.atlasdemo'
version = getEnvValue("versionName", "1.0.0");

publishing {
publications {
maven(MavenPublication) {
artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
artifactId "AP-debug"
}
}
}

三：构建Tpatch（具体可以看demo中的Tpatch.txt文件有详细说明，如下）
1、 app的build.gradle的语句"version = getEnvValue("versionName", "1.0.0");"中修改想要生成的app的versionName（默认为1.0.0）

app目录下执行../gradlew clean assembleDebug 生成apk  (windows 环境的命令为 ..\gradlew.bat clean assembleDebug  以下类同)

2、 app目录下执行../gradlew publish 将跟apk同目录的ap文件发布到仓库,此时ap的版本是1.0.0

3、 手机上安装生成的apk，同时进到动态部署界面（侧边栏里面划开点击进入),且手机连接电脑adb（确保adb devices可见）

///////////////////////////////^^^^^^^准备工作^^^^^^^^^^////////////////////////

4、 进行一些想要的修改（不支持manifest的修改）

5、 app工程目录下执行../gradlew clean assembleDebug -DapVersion=apVersion -DversionName=newVersion,
其中apVersion为之前打的完整apk的版本，newVersion为此次动态部署要生成的新的版本号，
例如命令 ../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1

6、 检查build/output/tpatch-debug 目录下文件是否生成，然后执行下面的命令(以下为mac下的命令，windows请修改文件分隔符)
adb push build/outputs/tpatch-debug/update-1.0.0.json /sdcard/Android/data/com.taobao.demo/cache/update-1.0.0.json
(根据你手机的当前版本推送对应版本的update-**.json,和对应的tpatch文件)
adb push build/outputs/tpatch-debug/patch-1.0.1@1.0.0.tpatch /sdcard/Android/data/com.taobao.demo/cache/patch-1.0.1@1.0.0.tpatch

7、 点击动态部署页面红色按钮执行动态部署

8、 后续继续做想要的修改，我们要变成1.0.2 (某个bundle做动态部署的时候请更新版本号，因为差量会基于版本号对比)
../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.2   这时候会生成两个  patch-1.0.2@1.0.0.tpatch  patch-1.0.2@1.0.1.tpatch

根据你目前的app版本，重复6步骤，推送对应版本的update-**.json,和对应的tpatch文件。

9、 后续继续做想要的修改，我们要变成1.0.3 (某个bundle做动态部署的时候请更新版本号，因为差量会基于版本号对比)
../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.3   这时候会生成三个  patch-1.0.3@1.0.2.tpatch  patch-1.0.3@1.0.1.tpatch  patch-1.0.3@1.0.0.tpatch

根据你目前的app版本，重复6步骤，推送对应版本的update-**.json,和对应的tpatch文件。

10、 如果做了多次动态部署后，需要从头开始测试，请先清楚AtlasDemo根目录下的hisTpatch文件夹。

四：常用命令(都需要到对应包下)
构建debug命令： ../gradlew assembleDebug
发布基线版本命令：../gradlew publish
单模块部署命令：../gradlew assemblePatchDebug

场景构建

Atlas Demo里面集成了主APK构建、动态部署构建、远程bundle构建等功能，下面我们进行单独介绍。

问题1：如何构建一个APK，发布到各个应用市场？

主APK构建步骤：

Atlas Demo中将主客户端代码和所有bundle都放在了一个工程下面，这也符合gradle工程的标准框架格式。

各个业务bundle可以根据业务需求修改更新各自bundle的代码。然后再通过修改app/build.gradle中的version = getEnvValue(“versionName”, “1.0.0”);来修改版本号，版本号默认为1.0.0。

然后再在app目录下面执行../gradlew clean assembleDebug publish命令从而进行APK打包，生成的APK文件目录是app/build/outputs/apk/app-debug.apk，上述命令也会将该目录下的ap文件发布到仓库以便于后续生成patch。
如果有手机连接在pc上可以直接使用adb install安装上述APK，在app目录下执行adb install app/build/outputs/apk/app-debug.apk。
问题2：如何在用户无感知的情况下，实现所有业务模块的独立动态更新？

#### 动态部署（patch）构建步骤： 1. 各个业务bundle可以根据业务需求修改更新各自bundle的代码。 2. app工程目录下执行`../gradlew clean assembleDebug -DapVersion=apVersion -DversionName=newVersion`, 其中apVersion为之前打的完整APK的版本，newVersion为此次动态部署要生成的新的版本号。 这里举一个简单的例子，例如“主APK构建”步骤的APK版本是1.0.0，然后我简单更新firstbundle的string.xml里面的hello_blank_fragment属性为“this is fragment of firstBundle”，然后执行`../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1`。 _firstbundlepatch.png 3. 检查build/output/tpatch-debug 目录下文件是否生成，将远程patch下载到你的设备上（主动下载和被动推送都可以，这里直接在PC上执行下面的命令(以下为mac下的命令，windows请修改文件分隔符)： ` adb push build/outputs/tpatch-debug/update.json /sdcard/Android/data/com.taobao.demo/cache/update.json` ` adb push build/outputs/tpatch-debug/patch-*.tpatch /sdcard/Android/data/com.taobao.demo/cache` 4. 打开Demo侧边栏，点击“动态部署模拟”，页面红色按钮执行动态部署，等待几秒钟之后APP会关闭此时说明动态部署已经成功，重启APP后就会发现自己改动的代码已经更新成功。
动态部署.png
动态部署结果.png
感兴趣的同学可以研究下update.json和tpatch文件
动态部署的主要优势：摆脱版本迭代周期限制，新增需求灵活发布；降低版本频繁发布给用户带来困扰；发现问题及时回滚；短时间内更高的覆盖率
问题3：如果在APK发布时，我不想把某个bundle编译进APK，而是在客户端使用时下载后加载，该怎么办？

远程bundle构建步骤：

添加远程bundle的依赖，参考 app/build.gradle下的 bundleCompile project(':remotebundle') ，
声明远程bundle列表，参考 app/build.gradle下的atlas { tBuildConfig { outOfApkBundles = ['remotebundle'] }。
构建完整包，在app目录下执行../gradlew clean assembleDebug publish，远程bundle 路径：app/build/outputs/remote-bundles-debug。
将远程so下载到你的设备上（主动下载和被动推送都可以），这里直接在PC上执行adb push app/build/outputs/remote-bundles-debug/libcom_taobao_remotebunle.so /sdcard/Android/data/com.taobao.demo/cache/libcom_taobao_remotebunle.so。
打开Demo侧边栏，点击“远程组件模拟”，点击“加载远程bundle”，加载成功后就会跳到remotebundle的页面。
动态部署.png

调试工具

单bundle调试（供线下调试使用，当只更改了单个bundle的代码时，无需对整个APP进行动态部署，可以一键进行单bundle的部署调试）

在设备上安装APP，设备ADB连接电脑成功。
修改一个bundle工程的代码或者资源（设置生效的标识）。
例如，我们这里在firstbundle中的FirstBundleActivity的onCreate的中加一个Toast提示，如下
单bundle.png
bundle工程的目录下执行../gradlew clean assemblePatchDebug，然后等应用重启或者应用关闭后点击重启”)就可以看到代码生效。
根据上述改动，我们在firstbundle的目录下执行../gradlew clean assemblePatchDebug，然后就可以看到客户端重启，Toast提示生效。
单bundle.png