group = 'com.open.yaoraotu.atlas'
version = getEnvValue("versionName", "1.0.0");
def apVersion = getEnvValue("apVersion", "");

apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'

repositories {
    mavenLocal()
    jcenter()
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    //only if you use Apache packages
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.open.yaoraotu"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName version
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Enabling multidex support.
        multiDexEnabled true
    }
    dexOptions {
        javaMaxHeapSize "2g"
        preDexLibraries = true
        jumboMode = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        debug {
//            multiDexEnabled true
//            ndk {
//                abiFilters "x86","armeabi"
//            }
//        }
    }
    dataBinding {
        enabled = true
    }
    //    afterEvaluate {
//        tasks.matching {
//            it.name.startsWith('dex')
//        }.each { dx ->
//            if (dx.additionalParameters == null) {
//                dx.additionalParameters = []
//            }
//            dx.additionalParameters += '--multi-dex' // enable multidex
//
//            // optional
//            // dx.additionalParameters += "--main-dex-list=$projectDir/<filename>".toString() // enable the main-dex-list
//        }
//    }
}


atlas {

    atlasEnabled true
    tBuildConfig {
        autoStartBundles = ['com.open.yaoraotu.mvp'] //自启动bundle配置
        outOfApkBundles = ['yaoraoturemotebundle','yaoraotuweexremotebundle']
        preLaunch = 'com.open.yaoraotu.atlas.CommonPreLaunch'
        classInject false
        //多个bundle
        dataBindingBundles = ['com.open.yaoraotu.mvvm','com.open.yaoraotu.m']
    }

    manifestOptions {
        addAtlasProxyComponents true
    }


    patchConfigs {
        debug {
            createTPatch true
        }
    }


    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "com.open.yaoraotu.atlas:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.alibaba:fastjson:1.1.45.android@jar'

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:support-vector-drawable:25.0.1'

    compile 'com.android.support:recyclerview-v7:25.0.1'

    //weex
    compile 'com.taobao.android:weex_sdk:0.9.5@aar'

    compile('com.taobao.android:atlas_core:5.0.7.30@aar') {
        transitive = true
    }
    compile 'com.taobao.android:atlasupdate:1.1.4.10@aar'

    // 在 API < 14 上的机器支持 WebP 时，需要添加
    compile 'com.facebook.fresco:animated-base-support:0.12.0'
    // 支持 GIF 动图，需要添加
    compile 'com.facebook.fresco:animated-gif:0.12.0'
    // 支持 WebP （静态图+动图），需要添加
    compile 'com.facebook.fresco:animated-webp:0.12.0'
    compile 'com.facebook.fresco:webpsupport:0.12.0'
    // 仅支持 WebP 静态图，需要添加
    compile 'com.facebook.fresco:webpsupport:0.12.0'
    compile 'com.facebook.fresco:fresco:0.12.0'

    compile project(':androidslidingmenulibrary')
    compile project(':androidindicatorlibrary')
    compile project(':androidcommonlibrary')
    //    compile project(':frescoandroidlibrary')
    compile project(':splashlibrary')
    compile project(':applicationlibrary')
    compile project(':commonlibrary')
//    compile project(':yaoraotumvpbundle')
//    compile project(':yaoraotumvvmbundle')

    // 初次加载组件 打包进apk
    bundleCompile project(':yaoraotumvpbundle')
    bundleCompile project(':yaoraotumvvmbundle')
    bundleCompile project(':yaoraoturemotebundle')
    bundleCompile project(':yaoraotuservicebundle')
    bundleCompile project(':yaoraotumbundle')
    bundleCompile project(':yaoraotuweexremotebundle')

}


String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }
    publications {
        // 默认本地仓库地址  用户目录/.m2/repository/
        maven(MavenPublication) {
            //读取ap目录上传maven
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            //生成本地maven目录
            groupId group
            artifactId "AP-debug"
        }
    }
}
